@startuml
title TP-UC-001 â€“ Login via Google (Design)

skinparam style strictuml
skinparam shadowing false
skinparam DefaultFontName "Segoe UI"
skinparam SequenceMessageAlign center

skinparam participant {
  BackgroundColor<<component>> #EAF2F8
  BorderColor<<component>> #2D3C50

  BackgroundColor<<control>> #FFF5CC
  BorderColor<<control>> #DAA520

  BackgroundColor<<model>> #E0FFE0
  BorderColor<<model>> #2E8B57

  BackgroundColor<<token>> #FADBD8
  BorderColor<<token>> #A93226

  FontName "Segoe UI"
  FontColor black
}

skinparam actor {
  BackgroundColor #FADBD8
  BorderColor black
  FontColor black
  FontName "Segoe UI"
}

actor Guest

participant "LoginComponent" <<component>>
participant "GoogleIDToken" <<token>>
control "AuthService" <<control>>
entity "User" <<model>>
entity "JWT" <<token>>

' === Flow Begins ===
Guest -> LoginComponent : Click "Login with Google"
activate LoginComponent

LoginComponent -> LoginComponent : openGoogleLoginPopup()
LoginComponent -> GoogleIDToken : obtain token via Auth0 SDK
activate GoogleIDToken
GoogleIDToken --> LoginComponent : id_token
deactivate GoogleIDToken

LoginComponent -> LoginComponent : temporarily store id_token

LoginComponent -> AuthService : validateGoogleToken(id_token)
activate AuthService

alt Valid token
  AuthService -> User : findUserByEmail(token.email)
  activate User
  User --> AuthService : user object
  deactivate User

  AuthService -> JWT : generate custom JWT
  activate JWT
  JWT --> AuthService : jwt
  deactivate JWT

  AuthService --> LoginComponent : return jwt
  deactivate AuthService

  LoginComponent -> LoginComponent : store jwt in Redux
  LoginComponent --> Guest : redirect to dashboard

else Invalid or tampered token
  AuthService --> LoginComponent : show 403 error
  deactivate AuthService
  LoginComponent -> LoginComponent : show error modal
end

opt User closes popup
  Guest --> LoginComponent : cancel login
  LoginComponent --> Guest : return to landing
end

opt Session Creation Fails
  AuthService --> LoginComponent : 500 error
  LoginComponent -> LoginComponent : show failure screen
end

deactivate LoginComponent

note right of LoginComponent
Handles OAuth popup, token handling,
state update (Redux), and redirection.
end note

note right of JWT
Custom token issued by backend
includes email, role, expiry.
end note

@enduml
