name: Deploy to DigitalOcean

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    steps:
      - name: Debug SSH Fingerprint Secret
        run: echo "SSH_FINGERPRINT=${{ secrets.SSH_FINGERPRINT }}"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: terraform

      - name: Plan Terraform
        id: plan
        run: terraform plan -out=tfplan -parallelism=5 -var="ssh_fingerprint=${{ secrets.SSH_FINGERPRINT }}"
        working-directory: terraform

      - name: Check for Existing Droplet IP
        id: check_droplet
        run: |
          EXISTING_DROPLET_IP=$(terraform output -raw droplet_ip 2>/dev/null || echo "")
          echo "EXISTING_DROPLET=$([[ -n "$EXISTING_DROPLET_IP" ]] && echo true || echo false)" >> $GITHUB_ENV
        working-directory: terraform

      - name: Show Plan
        if: steps.plan.outcome == 'failure'
        run: terraform show -no-color tfplan
        working-directory: terraform

      - name: Apply Terraform
        if: env.EXISTING_DROPLET == 'false' && steps.plan.outcome != 'skipped'
        run: terraform apply -auto-approve tfplan -var="ssh_fingerprint=${{ secrets.SSH_FINGERPRINT }}"
        working-directory: terraform

      - name: Get Droplet IP
        id: get_ip
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip 2>/dev/null)
          if [[ -z "$DROPLET_IP" ]]; then
            echo "Error: Droplet IP not found in Terraform state."
            exit 1
          fi
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
        working-directory: terraform

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
      DROPLET_IP: ${{ needs.terraform.outputs.get_ip.outputs.droplet_ip }}

    steps:
      - name: Install Docker and Start Service
        run: |
          sudo apt-get update && sudo apt-get install -y docker.io
          sudo systemctl start docker && sudo systemctl enable docker

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$DROPLET_IP" >> ~/.ssh/known_hosts

      - name: Deploy Containers to DigitalOcean
        run: |
          echo "Connecting to Droplet at $DROPLET_IP..."
          ssh -o StrictHostKeyChecking=no root@"$DROPLET_IP" << EOF
            echo "Logging into Docker..."
            docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"

            echo "Creating Docker network..."
            docker network create my_network || true

            echo "Deploying MSSQL container..."
            docker pull prabhulalithakrishnan/tradeport-backend-mssql:latest
            docker stop mssql || true
            docker rm mssql || true
            docker run -d -p 1433:1433 \
              -e SA_PASSWORD="$SA_PASSWORD" \
              --name mssql \
              --network=my_network \
              --mount type=bind,source=/mnt/volume_sgp1_01,target=/mnt/volume_sgp1_01 \
              prabhulalithakrishnan/tradeport-backend-mssql:latest

            echo "Docker container status:"
            docker ps -a
          EOF
