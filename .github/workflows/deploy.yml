name: Deploy to DigitalOcean

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Initialize Terraform
      env:
        TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        TF_VAR_ssh_fingerprint: ${{ secrets.SSH_FINGERPRINT }}
      run: terraform init -upgrade
      working-directory: terraform

    - name: Plan Terraform
      run: terraform plan -out=tfplan -parallelism=5
      working-directory: terraform

    - name: Apply Terraform (Avoid Duplicate Droplets)
      run: |
        EXISTING_DROPLET_IP=$(terraform output -raw droplet_ip 2>/dev/null || echo "")

        if [ -z "$EXISTING_DROPLET_IP" ]; then
          echo "No existing droplet found, applying Terraform..."
          terraform apply -auto-approve tfplan
        else
          echo "Droplet already exists: $EXISTING_DROPLET_IP"
        fi
      working-directory: terraform

    - name: Retrieve Droplet IP
      run: |
        EXISTING_DROPLET_IP=$(terraform output -raw droplet_ip 2>/dev/null || echo "")

        if [ -z "$EXISTING_DROPLET_IP" ]; then
          echo "Fetching new Droplet IP..."
          DROPLET_IP=$(terraform output -raw droplet_ip)
        else
          echo "Using existing Droplet IP: $EXISTING_DROPLET_IP"
          DROPLET_IP=$EXISTING_DROPLET_IP
        fi

        echo "Droplet IP: $DROPLET_IP"
        echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
      working-directory: terraform

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}

    steps:
    - name: Install Docker and Start Service
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: Configure SSH Access
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

        ls -l ~/.ssh/id_rsa # Verify SSH key permissions
      working-directory: terraform


    - name: Deploy Containers to DigitalOcean in One Docker Instance
      run: |
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF
          echo "Logging into Docker..."
          if ! docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"; then
            echo "Docker login failed! Check credentials or Docker Hub status."
            exit 1
          fi

          docker network create my_network || true

          echo "Pulling MSSQL image..."
          docker pull prabhulalithakrishnan/tradeport-backend-mssql:latest

          echo "Running MSSQL container..."
          docker run -d -p 1433:1433 \
            -e SA_PASSWORD="$SA_PASSWORD" \
            --name mssql \
            --network=my_network \
            --mount type=bind,source=/mnt/volume_sgp1_01,target=/mnt/volume_sgp1_01 \
            prabhulalithakrishnan/tradeport-backend-mssql:latest

          docker ps -a
        EOF
